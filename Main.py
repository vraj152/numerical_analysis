# =============================================================================
# Importing custom and python libraries.
# =============================================================================

from GenerateMatrix import GenerateMatrix
from Jacobi import Jacobi
from GaussSeidel import GaussSeidel
from SOR import SOR
import numpy as np

isDiagonalDominant = True

# =============================================================================
# Creating object of GenerateMatrix by passing the necessary arguments to constructor.
#     method (str) = Type of Matrix to be generated.
#         It can have following values.
#         1) Random
#         2) Lower
#         3) Upper
#         4) TriDiagonal
#         5) Symmetric
#         6) Z
#         7) Q
#     lower_threshold (float) = lower limit for spectral radius
#     upper_threshold (float) = upper limit for spectra radius
#     diagonal_dom (bool) = Whether diagonal dominant matrix to be generated.
#  
# =============================================================================

system = GenerateMatrix(method = "Z", lower_threshold = 0.5, upper_threshold = 0.8, diagonal_dom = isDiagonalDominant)
A, b = system.generate_system(1000)


# =============================================================================
# Printing logs 
# print("Spectral Radius: ", system.s_radius)
# print("Number of times matrix generated: " + str(system.gmc + system.spc))
# 
# =============================================================================

# =============================================================================
# Creating instance of Jacobi, GaussSeidel, SOR with appropriate constructor arguments.
# =============================================================================

jacobi_obj = Jacobi(A, b, system.method, isDiagonalDominant, system.jacobi_rad, 3000)
jacobi_obj.solver()
print(str(jacobi_obj))

gauss_obj = GaussSeidel(A, b, system.method, isDiagonalDominant, system.gs_rad, 3000)
gauss_obj.solver()
print(str(gauss_obj))

fault_tolerance_SOR = 1e-4

sor_obj = SOR(A, b, system.method, isDiagonalDominant, omega = 1, debug = True, fault_tolerance = fault_tolerance_SOR)
sor_obj.solver()
print(str(sor_obj))

# =============================================================================
# Checking whether solution generated by all the system is similar.
# =============================================================================

print("isSimilar? (Jacobi and Gauss): ", np.allclose(jacobi_obj.sol, gauss_obj.sol, atol = 1e-6))
print("isSimilar? (Jacobi and SoR)", np.allclose(jacobi_obj.sol, sor_obj.sol, atol = fault_tolerance_SOR))

# =============================================================================
# To load foreign system:
#     Please refer MatrixActualTest.py
# =============================================================================


